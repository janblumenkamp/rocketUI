Protocol stack files on the rocket:
Each package should also get a lifetime, after that it will be deleted from the stack if it could not be sent or if the stack is full so that there can be made new space for very important messages!

- HAL_Memory: Abstraction layer for interfacing the memory on the rocket
    init()
        initalizes the memory
    write_string(str, len, adr)
        writes the string str with the length len to the adress adr
    read_string(adr, buf, len)
        reads len bytes from the given adress and writes into buffer
- HAL_Serial: Abstraction layer for interfacing the serial interface
    init()
        initializes the serial interface
    write_string(str, len, adr)
        writes the string str with the length len to the adress adr
    read_callback(by)
        this function has to be called if a new byte is received. The received byte is passed by.
- Memory: Implementation of virtual memory as part of the physical memory. There will be one receive and one sent instance
    init(m)
        initializes the memory instance
    push(m, d, len)
        pushs the array d with the length len (where len < than the maximum length per slot) to the memory m. Returns id.
    delete(m, id)
        deletes the array with the id id from the memory m.
    get_freeSlots(m)
        returns the amount of free slots
- Comm: Everything regarding the communication comes together here\
    init(c, call_in, m_in, m_out)
        initializes the comm c with the HAL_Serial callback function (new byte received, for the parser), the message queue for incoming messages m_in and for outgoing messages m_out
    parser(by)
        being called from the HAL_Serial new byte callback (call_in). Parses the message and calls the call_out callback if package has been successfully parsed, puts the message in the queue for incoming messages and sends an ack package if the message could be stored on the message queue.
        If it receives an ack message, it deletes the message with the corresponding id from the m_out queue.
    get_packageAmount(pm)
        returns the amount of packages in the queue
    get_package(pm, id, p)
        reads the package with the id id from the memory m into the given package p
    get_nextPackage(pm, p)
        reads the oldest package from the memory m into the given package p
    send_pack(p)
        sends the message p to the queue for outgoing messages
    send_messages()
        sends all the messages on the queue for outgoing messages via the serial interface
- main
    HAL_Memory_init()
    HAL_Serial_init()
    Memory_init(m_in)
    Memory_init(m_out)
    PackageMemory(p_in, m_in)
    PackageMemory(p_out, m_out)    
    Comm_init(c, p, m_in, m_out, HAL_Serial_write)
    
    Main loop:
        - process incoming messages (read from p_in)
        - process messages to send (send_pack(p))
        - send outgoing messages (send_messages())
